// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Models;
//
//    var addressValidationParams = AddressValidationParams.FromJson(jsonString);

namespace ShipEngine.Models.AddressDto
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// The params to validate an address.
    /// </summary>
    public partial class AddressValidationParams
    {
        [JsonProperty("city_locality", NullValueHandling = NullValueHandling.Ignore)]
        public string CityLocality { get; set; }

        [JsonProperty("country_code")]
        public string CountryCode { get; set; }

        [JsonProperty("postal_code", NullValueHandling = NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        [JsonProperty("residential", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Residential { get; set; }

        [JsonProperty("state_province", NullValueHandling = NullValueHandling.Ignore)]
        public string StateProvince { get; set; }

        [JsonProperty("street")]
        public List<string> Street { get; set; }
    }

    public partial class AddressValidationParams
    {
        public static AddressValidationParams FromJson(string json) => JsonConvert.DeserializeObject<AddressValidationParams>(json, Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AddressValidationParams self) => JsonConvert.SerializeObject(self, Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
